{"trial_id": "03", "hyperparameters": {"space": [{"class_name": "Int", "config": {"name": "neurons_dense_1", "default": null, "conditions": [], "min_value": 1, "max_value": 600, "step": 1, "sampling": "linear"}}, {"class_name": "Choice", "config": {"name": "activation_dense_1", "default": "relu", "conditions": [], "values": ["relu", "sigmoid"], "ordered": false}}, {"class_name": "Int", "config": {"name": "neurons_dense_2", "default": null, "conditions": [], "min_value": 1, "max_value": 600, "step": 1, "sampling": "linear"}}, {"class_name": "Choice", "config": {"name": "activation_dense_2", "default": "relu", "conditions": [], "values": ["relu", "sigmoid"], "ordered": false}}, {"class_name": "Choice", "config": {"name": "loss", "default": "binary_crossentropy", "conditions": [], "values": ["binary_crossentropy", "sparse_categorical_crossentropy"], "ordered": false}}, {"class_name": "Float", "config": {"name": "learning_rate", "default": 0.001, "conditions": [], "min_value": 0.001, "max_value": 1.0, "step": null, "sampling": "linear"}}], "values": {"neurons_dense_1": 492, "activation_dense_1": "relu", "neurons_dense_2": 11, "activation_dense_2": "sigmoid", "loss": "sparse_categorical_crossentropy", "learning_rate": 0.5562164238483878}}, "metrics": {"metrics": {}}, "score": null, "best_step": 0, "status": "FAILED", "message": "Traceback (most recent call last):\n  File \"C:\\Users\\daniel.a.goncalves\\Desktop\\tedi\\.venv\\Lib\\site-packages\\keras_tuner\\src\\engine\\base_tuner.py\", line 274, in _try_run_and_update_trial\n    self._run_and_update_trial(trial, *fit_args, **fit_kwargs)\n  File \"C:\\Users\\daniel.a.goncalves\\Desktop\\tedi\\.venv\\Lib\\site-packages\\keras_tuner\\src\\engine\\base_tuner.py\", line 239, in _run_and_update_trial\n    results = self.run_trial(trial, *fit_args, **fit_kwargs)\n              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\daniel.a.goncalves\\Desktop\\tedi\\.venv\\Lib\\site-packages\\keras_tuner\\src\\engine\\tuner.py\", line 314, in run_trial\n    obj_value = self._build_and_fit_model(trial, *args, **copied_kwargs)\n                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\daniel.a.goncalves\\Desktop\\tedi\\.venv\\Lib\\site-packages\\keras_tuner\\src\\engine\\tuner.py\", line 233, in _build_and_fit_model\n    results = self.hypermodel.fit(hp, model, *args, **kwargs)\n              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\daniel.a.goncalves\\Desktop\\tedi\\.venv\\Lib\\site-packages\\keras_tuner\\src\\engine\\hypermodel.py\", line 149, in fit\n    return model.fit(*args, **kwargs)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\daniel.a.goncalves\\Desktop\\tedi\\.venv\\Lib\\site-packages\\keras\\src\\utils\\traceback_utils.py\", line 122, in error_handler\n    raise e.with_traceback(filtered_tb) from None\n  File \"C:\\Users\\daniel.a.goncalves\\Desktop\\tedi\\.venv\\Lib\\site-packages\\keras\\src\\backend\\tensorflow\\nn.py\", line 642, in sparse_categorical_crossentropy\n    raise ValueError(\nValueError: Argument `output` must have rank (ndim) `target.ndim - 1`. Received: target.shape=(None, 7), output.shape=(None, 7)\n"}